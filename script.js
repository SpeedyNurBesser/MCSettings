function togglePopup(id) {
  let popup = document.getElementById(id);

  if (popup.style.display == "block") {
    popup.style.display = "none";
  } else {
    popup.style.display = "block";
  }
}

const addElementButton = document.getElementById("addElement");
addElementButton.addEventListener("click", function () {
  togglePopup("addPopup");
});

const elementList = document.getElementById("elementList");
Sortable.create(elementList, {
  handle: ".fa-grip-vertical",
  animation: 150,
});

function downloadZip(zip, name = "zipFile.zip") {
  zip.generateAsync({ type: "blob" }).then(function (content) {
    saveAs(content, name);
  });
}

function prependCharsUntilLength(string, wantedLength, char) {
  let front = "";
  length = wantedLength - string.length;
  for (let i = 0; i < length; i++) {
    front += char;
  }
  return front + string;
}

function generateAllPossibleStates(numberOfOptions) {
  // the number of states is equal to 2^(n+1)-2 or 2^1 + 2^2 + ... + 2^n
  // let numberOfStates = Math.pow(2, num + 1) - 2;

  // States are generated by adding "0" and "1" to every previous State

  let output = [["0", "1"], []];
  let precedingNumbers = [];

  for (let i = 0; i <= numberOfOptions; i++) {
    precedingNumbers = [];
    for (let j = 0; j < output[0].length; j++) {
      let precedingLength = i - 1;
      if (output[0][j].length == precedingLength) {
        precedingNumbers.push(output[0][j]);
      }
    }

    for (let j = 0; j < precedingNumbers.length; j++) {
      output[0].push(precedingNumbers[j] + "0");
      output[0].push(precedingNumbers[j] + "1");
    }
  }

  for (let i = 0; i < output[0].length; i++) {
    let bits = prependCharsUntilLength(output[0][i], numberOfOptions, "0");
    let bools = Array.from(bits);
    for (let j = 0; j < bools.length; j++) {
      if (bools[j] == 0) {
        bools[j] = false;
      } else {
        bools[j] = true;
      }
    }
    bools.reverse();
    output[1].push(bools);
  }
  return output;
  // returns a list of two lists of lists: list[0][1] might look like this [0,0,0,1], while list[1][1] might look like this [false, false, false, true]
}

const errorText = document.getElementById("errorText");
function sendError(message) {
  errorText.innerHTML = message;
}

function commaSeperatedStringToArray(str) {
  let output = str.split(",");
  if (!(output.length === 1 && output[0] === "")) {
    return output;
  } else {
    return false;
  }
}

function isInt(str) {
  return !isNaN(str) && !isNaN(parseFloat(str));
} // https://stackoverflow.com/a/175787

function isFloat(str) {
  return !isNaN(parseFloat(str)) && isFinite(str);
} // https://stackoverflow.com/a/1830844

window.onbeforeunload = function () {
  return "";
};
